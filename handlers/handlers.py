import random

from aiogram import Router, F
from aiogram.filters import Command, CommandStart, CommandObject
from aiogram.types import Message, CallbackQuery, InputMediaPhoto

from config import birds, birds_2
from database.knock_db import get_user_data, save_user_data, user_exists_knock
from database.mailing import add_chat, add_user, check_user_exists
from database.premium_db import get_premium_user, has_premium
from database.tea_db import user_exists_tea
from filters.FloodWait import RateLimitFilter
from kb import profile_kb, cards_kb, rarity_kb, cool_card_kb, start_keyboard

handlers_router = Router()


@handlers_router.message(CommandStart())
async def start_command(message: Message, command: CommandObject):
    if command.args is not None:
        user_id = message.from_user.id
        base = await check_user_exists(user_id)
        tea_base = await user_exists_tea(user_id)
        knock_base = await user_exists_knock(user_id)
        if not base and not tea_base or not knock_base:
            await message.answer(user_id=command.args, text="–£ –≤–∞—Å –Ω–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª! (—Å–∏—Å—Ç–µ–º–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤ –µ—â–µ –Ω–µ –≥–æ—Ç–æ–≤–∞)")
        else:
            pass
    else:
        first_name = message.from_user.first_name
        text = (f"üëã {first_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Birdy.\n\n"
                f"üëæ –¢—É—Ç —Ç—ã –º–æ–∂–µ—à—å –ø–∏—Ç—å —á–∞–π –∏ —Å–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç—å—Å—è –∑–∞ –º–µ—Å—Ç–æ –≤ —Ç–æ–ø–µ, —Å–æ–±–∏—Ä–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞—Å–ª–∞–∂–¥–∞—Ç—å—Å—è –±–æ—Ç–æ–º.\n\n"
                f"üê¶‚Äç‚¨õÔ∏è –ë–æ—Ç –±—É–¥–µ—Ç —É–ª—É—á—à–∞—Ç—å—Å—è –∏ –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è —Å –∫–∞–∂–¥—ã–º —Ä–∞–∑–æ–º.\n\n")
        if message.chat.type in ["supergroup", "group"]:
            await add_chat(message.chat.id)
            text += "‚öôÔ∏è –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥ –Ω–∞–ø–∏—à–∏—Ç–µ /help."
            await message.reply(text)
        elif message.chat.type == "private":
            await add_user(message.from_user.id)
            await message.answer(text, reply_markup=await start_keyboard())


@handlers_router.message(Command("help"))
async def help_command(message: Message):
    if message.chat.type in ["supergroup", "group"]:
        await add_chat(message.chat.id)
    elif message.chat.type == "private":
        await add_user(message.from_user.id)

    text = '''
üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥:*

üìã *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
- `/profile`, `–±–ø—Ä–æ—Ñ–∏–ª—å` ‚Äî –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å.
- `/chai`, `—á–∞–π`, ‚Äî –≤—ã–ø–∏—Ç—å —á–∞–π.
- `/knock`, `–∫–Ω–æ–∫` ‚Äî –ø–æ–ª—É—á–∏—Ç—å –∫–∞—Ä—Ç—É (–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ –ø—Ç–∏—á–∫–∞–º–∏).

üìä *–¢–æ–ø—ã:*
- `/chai_top`, `—Ç–æ–ø —á–∞—è` ‚Äî —Ç–æ–ø –ø–æ –≤—ã–ø–∏—Ç–æ–º—É —á–∞—é.
- `/cards_top`, `—Ç–æ–ø –∫–∞—Ä—Ç–æ—á–µ–∫` ‚Äî —Ç–æ–ø –∫–∞—Ä—Ç–æ—á–µ–∫ –ø–æ –ø–æ–∏–Ω—Ç–∞–º –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É.
    '''
    await message.answer(text, parse_mode='Markdown', disable_web_page_preview=True)


@handlers_router.message(RateLimitFilter(1), F.text.casefold().in_(
    ["–±–ø—Ä–æ—Ñ–∏–ª—å".casefold(), "/profile".casefold(), "–±–∏—Ä–¥–∏ –ø—Ä–æ—Ñ–∏–ª—å".casefold(), "üë§ –±–ø—Ä–æ—Ñ–∏–ª—å".casefold()]))
async def birdy_profile(message: Message):
    if message.chat.type in ["supergroup", "group"]:
        await add_chat(message.chat.id)
    elif message.chat.type == "private":
        await add_user(message.from_user.id)
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    last_name = message.from_user.last_name or ""
    prem_text = await get_premium_user(user_id)
    user_data = await get_user_data(user_id, first_name)
    count_birds = len(user_data['birds'])

    user_profile_photos = await message.bot.get_user_profile_photos(user_id, limit=1)
    if user_profile_photos.photos:
        photo = user_profile_photos.photos[0][-1]
        file_id = photo.file_id

        photo_cache = file_id
    else:
        photo_cache = 'https://tinypic.host/images/2024/07/08/avatar.jpg'

    caption = (f"üè° –õ–∏—á–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å {first_name} {last_name}\n"
               f"üÉè –°–æ–±—Ä–∞–Ω–æ {count_birds} –∫–∞—Ä—Ç–æ—á–µ–∫ –∏–∑ {len(birds_2)} –≤–æ–∑–º–æ–∂–Ω—ã—Ö.\n"
               f"üèÜ –ë–∞–ª–∞–Ω—Å –ø–æ–∏–Ω—Ç–æ–≤: {user_data['points']}\n"
               f"üíé –ü—Ä–µ–º–∏—É–º: {prem_text}")
    await message.bot.send_photo(chat_id=message.chat.id, photo=photo_cache, caption=caption,
                                 reply_markup=await profile_kb(user_id))


@handlers_router.callback_query(F.data.startswith("cards:"))
async def show_cards(callback: CallbackQuery):
    data = callback.data.split(":")
    user_id = data[1]
    user_nickname = callback.from_user.first_name
    if user_id != str(callback.from_user.id):
        await callback.answer("–í—ã –∞—Ä–µ—Å—Ç–æ–≤–∞–Ω—ã, —Ä—É–∫–∏ –≤–≤–µ—Ä—Ö!")
        return
    try:
        await callback.bot.send_message(chat_id=callback.from_user.id,
                                        text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å –∫–∞—Ä—Ç–æ—á–µ–∫, –∫–æ—Ç–æ—Ä—ã–µ —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å:",
                                        reply_markup=await rarity_kb())
        if callback.message.chat.type in ["group", "supergroup"]:
            await callback.bot.send_message(chat_id=callback.message.chat.id,
                                            text=f"{user_nickname}, –∫–∞—Ä—Ç–æ—á–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤–∞–º –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!")
        else:
            pass
    except Exception:
        await callback.answer("–ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É —á—Ç–æ-—Ç–æ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º –∫–∞—Ä—Ç–æ—á–∫–∏!", show_alert=True)


@handlers_router.callback_query(F.data.startswith("select_rarity:"))
async def select_rarity(callback: CallbackQuery):
    rarity = callback.data.split(":")[1]
    user_data = await get_user_data(callback.from_user.id, callback.from_user.first_name)

    user_birds = [bird for bird in user_data['birds'] if
                  next(b["rarity"] for b in birds_2 if b["name"] == bird) == rarity]

    if not user_birds:
        await callback.answer(f"–£ –≤–∞—Å –Ω–µ—Ç –∫–∞—Ä—Ç–æ—á–µ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{rarity}'")
        return

    current_bird_name = user_birds[0]
    current_bird = next(bird for bird in birds_2 if bird["name"] == current_bird_name)
    caption = (f"üÉè –ö–∞—Ä—Ç–æ—á–∫–∞ {current_bird['name']}\n"
               f"–†–∞—Ä–∏—Ç–µ—Ç: {current_bird['rarity']}\n"
               f"–ú–µ—Å—Ç–æ –æ–±–∏—Ç–∞–Ω–∏—è: {current_bird['place']}\n")
    if 'points' in current_bird:
        caption += f"–û—á–∫–∏: {current_bird['points']}"

    keyboard = await cards_kb(str(callback.from_user.id), 0, len(user_birds), rarity, current_bird_name)

    await callback.bot.send_photo(chat_id=callback.message.chat.id, photo=current_bird['photo'], caption=caption,
                                  reply_markup=keyboard)
    await callback.answer()


@handlers_router.callback_query(F.data.startswith("ccards:"))
async def show_cards(callback: CallbackQuery):
    data = callback.data.split(":")
    rarity = data[1]
    current_index = int(data[2])

    user_data = await get_user_data(callback.from_user.id, callback.from_user.first_name)

    user_birds = [bird for bird in user_data['birds'] if
                  next(b["rarity"] for b in birds_2 if b["name"] == bird) == rarity]

    if not user_birds:
        await callback.answer(f"–£ –≤–∞—Å –Ω–µ—Ç —Ç–∞–∫–æ–π —Ä–µ–¥–∫–æ—Å—Ç–∏.")
        return

    current_bird_name = user_birds[current_index]
    current_bird = next(bird for bird in birds_2 if bird["name"] == current_bird_name)

    caption = (f"üÉè –ö–∞—Ä—Ç–æ—á–∫–∞ {current_bird['name']}\n"
               f"–†–∞—Ä–∏—Ç–µ—Ç: {current_bird['rarity']}\n"
               f"–ú–µ—Å—Ç–æ –æ–±–∏—Ç–∞–Ω–∏—è: {current_bird['place']}\n")
    if 'points' in current_bird:
        caption += f"–û—á–∫–∏: {current_bird['points']}"

    keyboard = await cards_kb(str(callback.from_user.id), current_index, len(user_birds), rarity, current_bird_name)
    photo = current_bird['photo']
    media = InputMediaPhoto(media=photo, caption=caption)

    if callback.message.photo:
        await callback.message.edit_media(media=media, reply_markup=keyboard)
    else:
        await callback.message.edit_caption(caption=caption, reply_markup=keyboard)

    await callback.answer()

@handlers_router.callback_query(F.data.startswith("cool_card:"))
async def cool_card_handler(callback: CallbackQuery):
    user_id = callback.data.split(":")[1]
    if user_id != str(callback.from_user.id):
        await callback.answer("–í—ã –∞—Ä–µ—Å—Ç–æ–≤–∞–Ω—ã, —Ä—É–∫–∏ –≤–≤–µ—Ä—Ö!")
        return
    first_name = callback.from_user.first_name
    user_data = await get_user_data(callback.from_user.id, first_name)
    if await has_premium(int(user_id)):
        price = 45000
    else:
        price = 50000
    await callback.message.reply(f"üÉè –ö—É–ø–∏—Ç—å –ª–∏–º–∏—Ç–∫—É. –¶–µ–Ω–∞: {price} pts.\n"
                                 f"üëõ –ë–∞–ª–∞–Ω—Å pts: {user_data['points']}",
                                 reply_markup=await cool_card_kb(callback.from_user.id))


@handlers_router.callback_query(F.data.startswith("buy_cool_card:"))
async def buy_cool_card(callback: CallbackQuery):
    user_id = callback.data.split(":")[1]
    if user_id != str(callback.from_user.id):
        await callback.answer("–í—ã –∞—Ä–µ—Å—Ç–æ–≤–∞–Ω—ã, —Ä—É–∫–∏ –≤–≤–µ—Ä—Ö!")
        return

    first_name = callback.from_user.first_name
    user_data = await get_user_data(callback.from_user.id, first_name)
    if await has_premium(int(user_id)):
        price = 45000
    else:
        price = 50000
    if user_data['points'] >= price:
        excluded_birds = ["–ü—Ç–∏—Ü–∞ –±–æ–≥ –≤–æ–¥—ã", "–ü—Ç–∏—Ü–∞ –±–æ–≥ –æ–≥–Ω—è", "–ü—Ç–∏—Ü–∞ –±–æ–≥ –∫–∞–º–Ω—è", "–ü—Ç–∏—Ü–∞ –±–æ–≥ –≥—Ä–æ–º–∞",
                          "–ü—Ç–∏—Ü–∞ –±–æ–≥ —Ä–∞—Å—Ç–µ–Ω–∏–π"]
        eligible_birds = [bird for bird in birds_2 if bird["rarity"] == "–ö—Ä—É—Ç–∫–∞" and bird["name"] not in excluded_birds]

        if not eligible_birds:
            await callback.answer(f"{first_name}, –≤—ã —É–∂–µ —Å–æ–±—Ä–∞–ª–∏ –≤—Å–µ –∫—Ä—É—Ç–∫–∏, –ø–æ–∑–¥—Ä–∞–≤–ª—è—é!")
            return

        chosen_bird = None
        attempt_count = 0
        while attempt_count < 100:
            chosen_bird = random.choice(eligible_birds)
            if chosen_bird['name'] not in user_data['birds']:
                break
            attempt_count += 1

        if chosen_bird and chosen_bird['name'] not in user_data['birds']:
            user_data['birds'].append(chosen_bird['name'])
            user_data['points'] -= price

            await save_user_data(user_data)

            photo_data = chosen_bird['photo']
            await callback.bot.send_photo(chat_id=callback.message.chat.id, photo=photo_data,
                                          caption=f"{first_name}, –≤–∞–º –≤—ã–ø–∞–ª–∞ {chosen_bird['name']}!")
        else:
            await callback.bot.send_message(chat_id=callback.message.chat.id,
                                            text=f"{first_name}, –≤—ã —É–∂–µ —Å–æ–±—Ä–∞–ª–∏ –≤—Å–µ –∫—Ä—É—Ç–∫–∏.")
    else:
        await callback.answer("–ù–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –æ—á–∫–æ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!", show_alert=True)


@handlers_router.callback_query(F.data.startswith("ref:"))
async def ref_handler(callback: CallbackQuery):
    user_id = callback.data.split(":")[1]
    if user_id != str(callback.from_user.id):
        await callback.answer("–í—ã –∞—Ä–µ—Å—Ç–æ–≤–∞–Ω—ã, —Ä—É–∫–∏ –≤–≤–µ—Ä—Ö!")
        return
    await callback.message.reply(f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞:\n"
                                 f"https://t.me/birdy_ibot?start={user_id}", disable_web_page_preview=True)