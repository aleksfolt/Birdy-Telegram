from aiogram import Router, F
from aiogram.types import CallbackQuery, LabeledPrice, Message, PreCheckoutQuery
from aiocryptopay import AioCryptoPay, Networks
import aiorocket

from database.premium_db import add_premium_user
from kb import premium_kb, pay_premium_kb, pay_cb, payment_keyboard
from loader import bot, dp

premium_router = Router()
prem_text = (f"üíé Birdy Premium\n\n"
             f"üëë –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
             f"‚åõÔ∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ –≤–º–µ—Å—Ç–æ 5.\n"
             f"üÉè –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–ø–∞–¥–µ–Ω–∏—è –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö –∏ –º–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç.\n"
             f"üîÑ –ë–æ–ª–µ–µ –±—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
             f"üçµ –ß–∞–π –≤—ã–¥–∞–µ—Ç—Å—è –æ—Ç 500 –¥–æ 2000 –≤–º–µ—Å—Ç–æ 200 –¥–æ 2000.\n"
             f"üóìÔ∏è –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è 30 –¥–Ω–µ–π.\n\n"
             f"üí≥ –ë—É–¥–µ—Ç–µ –ø–æ–∫—É–ø–∞—Ç—å?")
prem_textt = (f"üíé Birdy Premium\n\n"
              f"üëë –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:\n"
              f"‚åõÔ∏è –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø–æ–ª—É—á–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –∫–∞–∂–¥—ã–µ 4 —á–∞—Å–∞ –≤–º–µ—Å—Ç–æ 5.\n"
              f"üÉè –ü–æ–≤—ã—à–µ–Ω–Ω–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –≤—ã–ø–∞–¥–µ–Ω–∏—è –ª–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã—Ö –∏ –º–∏—Ñ–∏—á–µ—Å–∫–∏—Ö –∫–∞—Ä—Ç.\n"
              f"üîÑ –ë–æ–ª–µ–µ –±—ã—Å—Ç—Ä–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
              f"üçµ –ß–∞–π –≤—ã–¥–∞–µ—Ç—Å—è –æ—Ç 500 –¥–æ 2000 –≤–º–µ—Å—Ç–æ 200 –¥–æ 2000.\n"
              f"üóìÔ∏è –°—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è 30 –¥–Ω–µ–π.\n\n"
              f"üí≥  –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã:")
crypto = AioCryptoPay(token='275932:AAJGiROUIeR5syysCkBUgHT3N8IBnPcriKR', network=Networks.MAIN_NET)
api = aiorocket.Rocket('596b0776e2bb0331fbf0de951')
invoices = {}


@premium_router.callback_query(F.data.startswith("premium:"))
async def buy_premium(callback: CallbackQuery):
    user_id = callback.data.split(":")[1]
    if user_id != str(callback.from_user.id):
        await callback.answer("–í—ã –∞—Ä–µ—Å—Ç–æ–≤–∞–Ω—ã, —Ä—É–∫–∏ –≤–≤–µ—Ä—Ö!")
        return
    if callback.message.chat.type in ["supergroup", "group"]:
        await callback.message.reply(prem_text, reply_markup=await premium_kb(user_id))
    elif callback.message.chat.type == "private":
        await callback.message.reply(prem_textt, reply_markup=await pay_premium_kb())


@premium_router.callback_query(F.data.startswith("buy_premium:"))
async def pay_premium(callback: CallbackQuery):
    user_id = callback.data.split(":")[1]
    if user_id != str(callback.from_user.id):
        await callback.answer("–í—ã –∞—Ä–µ—Å—Ç–æ–≤–∞–Ω—ã, —Ä—É–∫–∏ –≤–≤–µ—Ä—Ö!")
        return
    try:
        await callback.bot.send_message(chat_id=callback.from_user.id, text=prem_textt,
                                        reply_markup=await pay_premium_kb())
        if callback.message.chat.type in ["supergroup", "group"]:
            await callback.message.reply("–°–ø–æ—Å–æ–±—ã –æ–± –æ–ø–ª–∞—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
    except Exception:
        await callback.answer("–ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —á—Ç–æ –Ω–∏–±—É–¥—å —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤–∞–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã.",
                              show_alert=True)


@premium_router.callback_query(F.data.startswith("buy_"))
async def pay_invoice(callback: CallbackQuery):
    method = callback.data.split("_")[1]
    user_id = callback.from_user.id

    if method == "cb":
        invoice = await crypto.create_invoice(asset='USDT', amount=0.5)
        invoice_id = invoice.invoice_id
        await callback.message.answer("üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ —á–µ–∫ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ø –æ–ø–ª–∞—Ç–∏–ª.",
                                      reply_markup=await pay_cb(invoice.bot_invoice_url, invoice_id, "cb"))

    elif method == "xr":
        invoice = await api.create_invoice(
            amount=0.50,
            currency='USDT'
        )
        invoice_link = invoice.link
        invoice_id = invoice.id
        await callback.message.answer(
            "üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ —á–µ–∫ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ø –æ–ø–ª–∞—Ç–∏–ª.",
            reply_markup=await pay_cb(invoice_link, invoice_id, "xr")
        )
    elif method == "xtr":
        prices = [LabeledPrice(label="XTR", amount=30)]
        await callback.message.answer_invoice(
            title="üåü Birdy Premium",
            description="üíé –ü–æ–∫—É–ø–∫–∞ Birdy Premium",
            prices=prices,
            provider_token="",
            payload="birdy_premium",
            currency="XTR",
            reply_markup=await payment_keyboard(),
        )


@premium_router.callback_query(F.data.startswith("check_pay_"))
async def check_pay(callback: CallbackQuery):
    method = callback.data.split("_")[2]
    if method == "cb":
        invoice_id = callback.data.split("_")[3]
        old_invoice = await crypto.get_invoices(invoice_ids=int(invoice_id))
        if old_invoice.status == "paid":
            await add_premium_user(callback.from_user.id, 31)
            await callback.bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text="‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞! –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏."
            )
        else:
            await callback.answer("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞! –ü–æ–ø—Ä–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.", show_alert=True)
    elif method == "xr":
        invoice_id = callback.data.split("_")[3]
        invoice_status = await api.get_invoice(int(invoice_id))
        if invoice_status.paid:
            await add_premium_user(callback.from_user.id, 31)
            await callback.bot.edit_message_text(
                chat_id=callback.message.chat.id,
                message_id=callback.message.message_id,
                text="‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞! –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏."
            )
        else:
            await callback.answer("‚ùå –û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞! –ü–æ–ø—Ä–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.", show_alert=True)


async def handle_pre_checkout_query(pre_checkout_query: PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


async def handle_successful_payment(message: Message):
    await add_premium_user(message.from_user.id, 31)
    await message.answer(
        '‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞! –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å —ç–∫—Å–∫–ª—é–∑–∏–≤–Ω—ã–º–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞–º–∏.')


dp.pre_checkout_query.register(handle_pre_checkout_query)
dp.message.register(handle_successful_payment, F.successful_payment)
