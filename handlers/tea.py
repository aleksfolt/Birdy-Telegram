import random
import time

import aiosqlite
from aiogram import Router, F
from aiogram.types import Message
from html import escape
from database.premium_db import has_premium

tea_router = Router()
TIME_LIMIT = 600
tea_names = [
    "–ó–µ–ª–µ–Ω—ã–π —á–∞–π",
    "–ß–µ—Ä–Ω—ã–π —á–∞–π",
    "–ë–µ–ª—ã–π —á–∞–π",
    "–ü—É—ç—Ä",
    "–û–æ–ª–æ–Ω–≥",
    "–†–æ–π–±—É—à",
    "–ú–∞—Ç–µ",
    "–¢—Ä–∞–≤—è–Ω–æ–π —á–∞–π",
    "–§—Ä—É–∫—Ç–æ–≤—ã–π —á–∞–π",
    "–ö–∞—Ä–∫–∞–¥–µ",
    "–ß–∞–π —Å –ª–∏–º–æ–Ω–æ–º",
    "–ß–∞–π —Å –º–æ–ª–æ–∫–æ–º",
    "–ß–∞–π —Å —Å–∞—Ö–∞—Ä–æ–º",
    "–°–∏–Ω–∏–π —á–∞–π",
    "–ö—É —Ü—è–æ",
    "–§–∏—Ç–æ—á–∞–∏",
    "–ü–µ–∫–æ"
]


@tea_router.message(F.text.casefold().in_(
    ["—á–∞–π".casefold(), "/tea".casefold(), "/chai".casefold(), "‚òïÔ∏è —á–∞–π".casefold()]))
async def handle_tea(message: Message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    current_time = int(time.time())

    async with aiosqlite.connect('database.db') as db:
        async with db.execute('SELECT tea_count, last_used FROM users WHERE user_id = ?', (user_id,)) as cursor:
            row = await cursor.fetchone()

            if row:
                current_tea_count, last_used = row
                if current_time - last_used < TIME_LIMIT:
                    remaining_time = TIME_LIMIT - (current_time - last_used)
                    minutes, seconds = divmod(remaining_time, 60)
                    await message.reply(
                        f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –µ—â–µ {minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —á–∞—à–∫–æ–π —á–∞—è.")
                    return
            else:
                current_tea_count = 0
        if await has_premium(user_id):
            rand = 500
        else:
            rand = 200
        tea_count = random.randint(rand, 2000)
        random_tea = random.choice(tea_names)
        new_total_tea_count = current_tea_count + tea_count

        await db.execute('''
            INSERT INTO users (user_id, first_name, tea_count, last_used)
            VALUES (?, ?, ?, ?)
            ON CONFLICT(user_id) DO UPDATE SET 
            tea_count = users.tea_count + excluded.tea_count, 
            last_used = excluded.last_used
        ''', (user_id, first_name, tea_count, current_time))
        await db.commit()
    print(message)
    await message.reply(f"{first_name}, –≤—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–∏–ª–∏ —á–∞–π!\n\n"
                        f"–í—ã–ø–∏—Ç–æ: {tea_count} –º–ª.\n"
                        f"–ß–∞–π: {random_tea}\n\n"
                        f"–í—Å–µ–≥–æ –≤—ã–ø–∏—Ç–æ: {new_total_tea_count} –º–ª.")


@tea_router.message(F.text.casefold().in_(
    ["—Ç–æ–ø —á–∞—è", "—á–∞–π —Ç–æ–ø", "—á–∞—è —Ç–æ–ø", "‚≠êÔ∏è —Ç–æ–ø —á–∞—è"]))
async def handle_top(message: Message):
    user_id = message.from_user.id

    async with aiosqlite.connect('database.db') as db:
        async with db.execute('SELECT first_name, tea_count FROM users ORDER BY tea_count DESC LIMIT 10') as cursor:
            top_rows = await cursor.fetchall()

        async with db.execute('''
            SELECT COUNT(*) + 1 FROM users WHERE tea_count > (SELECT tea_count FROM users WHERE user_id = ?)
        ''', (user_id,)) as cursor:
            user_position_row = await cursor.fetchone()

        async with db.execute('SELECT first_name, tea_count FROM users WHERE user_id = ?', (user_id,)) as cursor:
            user_info = await cursor.fetchone()

    if top_rows:
        top_message = "üí´ –¢–æ–ø 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –æ–±—ä–µ–º—É –≤—ã–ø–∏—Ç–æ–≥–æ —á–∞—è:\n\n"
        for idx, (first_name, tea_count) in enumerate(top_rows, start=1):
            top_message += f"{idx}. {escape(first_name)} - <b>{tea_count}</b> –º–ª.\n"
    else:
        top_message = "–°–ø–∏—Å–æ–∫ —Ç–æ–ø-10 –ø–æ–∫–∞ –ø—É—Å—Ç.\n"

    if user_info:
        user_position = user_position_row[0] if user_position_row else "N/A"
        first_name, tea_count = user_info
        top_message += f"\n‚è∫Ô∏è –í–∞—à–µ –º–µ—Å—Ç–æ: {user_position}. {escape(first_name)} - <b>{tea_count}</b> –º–ª."
    else:
        top_message += ""

    await message.answer(top_message, parse_mode="html")

